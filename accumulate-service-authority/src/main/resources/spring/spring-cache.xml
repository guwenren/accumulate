<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--<property name="testWhileIdle" value="true" />-->
    <!--<property name="minEvictableIdleTimeMillis" value="60000" />-->
    <!--<property name="timeBetweenEvictionRunsMillis" value="30000" />-->
    <!--<property name="numTestsPerEvictionRun" value="-1" />-->
    <!--<property name="maxTotal" value="50" />-->
    <!--<property name="maxIdle" value="50" />-->
    <!--<property name="minIdle" value="10" />-->
    <!--</bean>-->

    <!--<bean id="jedisSentinelPool" class="redis.clients.jedis.JedisSentinelPool" destroy-method="destroy">-->
    <!--<constructor-arg name="masterName" value="master1"/>-->
    <!--<constructor-arg name="sentinels">-->
    <!--<set value-type="java.lang.String">-->
    <!--<value>192.168.1.213:6379</value>-->
    <!--</set>-->
    <!--</constructor-arg>-->
    <!--<constructor-arg name="poolConfig" ref="jedisPoolConfig" />-->
    <!--</bean>-->


    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="100"/><!-- 最大闲置 -->
        <property name="minIdle" value="10"/><!-- 最小闲置 -->
        <property name="testOnBorrow" value="true"/><!-- 可以获取 -->
        <!--        <property name="testOnReturn" value="true"/>-->
    </bean>
    <!-- redis 配置,也可以把配置挪到properties配置文件中,再读取 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}" type="java.lang.String"/>
        <constructor-arg name="port" value="6379" type="int"/>
        <constructor-arg name="timeout" value="5000" type="int"/>
    </bean>
    <!--
        这种 arguments 构造的方式，之前配置有缺点。
        这里之前的配置有问题，因为参数类型不一致，有时候jar和环境的问题，导致参数根据index对应，会处理问题，
        理论上加另一个 name，就可以解决，现在把name 和type都加上，更保险。
     -->
    <bean id="redisUtils" class="com.guwr.accumulate.common.cache.RedisUtils">
        <property name="jedisPool" ref="jedisPool"/>
    </bean>
</beans>