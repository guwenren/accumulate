互联网架构“高并发”
dns = Domain Name System 域名系统
rpc = Remote Procedure Call 远程过程调用

一、什么是高并发（通过设计保证系统能够并行处理很多请求）
        1、响应时间：客户端发送http请求，系统响应时间
        2、吞吐量：单位时间内处理的请求数量
        3、每秒查询率：每秒响应请求数
        4、并发用户数：同时正常承载使用系统用户访问数量

二、如何提升系统的并发能力，主要以水平扩展为主（垂直扩展、水平扩展）
        1、垂直扩展：增强单机硬件性能（ssd、网络）
        2、水平扩展：只要增加服务器数量就能扩充服务器性能

三、常见的互联网分层架构
       1、客户端（浏览器、APP）
       2、反向代理（系统入库，反向代理 nginx）
       3、站点应用（实现核心应用逻辑，返回html、Json）
       4、服务（模块间的互相调用为应用层提供服务）
       5、数据-缓存（加速访问存储）
       6、数据-数据库（提供数据存储）

四、分层水平扩展架构实践
       1、反向代理层的水平扩展（dns-server对于一个域名配置了多个解析ip，每次DNS解析请求来访问dns-server，会轮询返回这些ip）
       2、站点层的水平扩展（通过修改nginx.conf，可以设置多个web后端）
       3、服务层的水平扩展（站点层通过rpc-client调用下游的服务层rpc-server时，rpc-client中的连接池会建立与下游服务多个连接）
       4、数据层的水平扩展
          4.1、按照范围水平拆分
               优点：规则简单、数据均匀、扩展性好
               缺点：负载不均匀，一般新用户比老用户更加活跃，大范围的请求服务压力会更大
          4.2、按照哈希水平拆分
               优点：规则简单、数据均匀、负载均匀
               缺点：扩展性差

五、数据库水平拆分、主从同步区别
        水平拆分
            1、每个库存放的数据量是总量1/n，单机性能好
            2、n库上没有交集，n库的数据并集是数据的全集
            3、数据存放在n库上，理论上读写性能都是n倍
        主从同步
            1、每个库存放的数据量和总量是一样的
            2、n库上的数据量都一样都是全集
            3、理论上读性能扩展了n倍，写仍然单点，写性能不变

六、总结
        各层实施水平扩展后，能够通过增加服务器数量的方式来提升系统的性能，做到理论上的性能无限。
        通过设计保证系统能够并行处理更多的请求
        理论上两种扩展方法：垂直扩展、水平扩展


#互联网架构“高可用”

##一、什么是高可用
    通常指：`通过设计减少系统不能提供服务的时间`

##二、如何保证系统的高可用
    单点是高可用的大敌，应该在系统设计的时候尽量避免单点，`高可用保证的原则是“集群”或者“冗余”`,有了冗余之后，还不够，
    `通过“故障自动转移”来实现系统的高可用`

##三、常见互联网分层架构
* 客户端层：典型调用方是浏览器browser或者手机应用APP
* 反向代理层：系统入口，反向代理
* 站点应用层：实现核心应用逻辑，返回html或者json
* 服务层：如果实现了服务化，就有这一层
* 数据-缓存层：缓存加速访问存储
* 数据-数据库层：数据库固化数据存储
######整个系统的高可用，又是通过每一层的冗余+自动故障转移来综合实现的。

##四、分层高可用架构实践
客户层->反向代理层（两台nginx,线上提供服务，冗余保证高可用，keepalived存活探测，相同的virtual IP提供服务，自动故障转移）
反向代理层->站点层（站点层冗余，nginx存活探测）
站点层->服务层（服务冗余，服务层注册中心存活探测）
服务层->缓存层（redis天然支持主从同步，redis官方也有sentinel哨兵机制，来做redis的存活性检测）
